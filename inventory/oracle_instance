#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from typing import Optional


def _parse_raw_db_creation_time(raw_str) -> Optional[str]:
    """ "%d%m%Y%H%M%S" => "%Y-%m-%d %H:%M"

        >>> _parse_raw_db_creation_time("080220151025")
        '2015-02-08 10:25'

    """

    if not (isinstance(raw_str, str) and raw_str.isdigit() and len(raw_str) == 12):
        return None

    return f"{raw_str[4:8]}-{raw_str[2:4]}-{raw_str[:2]} {raw_str[8:10]}:{raw_str[10:]}"


def inventory_oracle_instance(parsed, inventory_tree, status_data_tree):
    path = "software.applications.oracle.instance:"
    inv_node = inventory_tree.get_list(path)
    status_node = status_data_tree.get_list(path)
    for item_data in sorted(parsed.values(), key=lambda v: v.get("sid")):
        if item_data['invalid_data']:
            continue

        inv_node.append({
            "sid": item_data['sid'],
            "pname": item_data['pname'],
            "version": item_data['version'],
            "openmode": item_data['openmode'],
            "logmode": item_data['log_mode'],
            "logins": item_data['logins'],
            "db_creation_time": _parse_raw_db_creation_time(item_data['db_creation_time']),
        })

        try:
            up_seconds = int(item_data['up_seconds'])
        except (TypeError, ValueError):
            up_seconds = None

        status_node.append({
            "sid": item_data['sid'],
            "pname": item_data['pname'],
            "db_uptime": up_seconds,
        })


inv_info['oracle_instance'] = {
    'inv_function': inventory_oracle_instance,
}
