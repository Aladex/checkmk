#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

import time
from contextlib import suppress
from typing import NamedTuple, Optional

from cmk.base.plugins.agent_based.agent_based_api.v1.type_defs import StringTable

# .1.3.6.1.4.1.674.10892.5.4.300.50.1.8.1.1 2.5.2
# .1.3.6.1.4.1.674.10892.5.5.1.20.130.3.1.26.1 1.03
# .1.3.6.1.4.1.674.10892.5.1.3.2.0 JG2NS12
# .1.3.6.1.4.1.674.10892.5.1.3.3.0 42330791846


class Section(NamedTuple):
    serial: str
    expresscode: str
    bios_date: Optional[float]
    bios_version: str
    bios_vendor: str
    raid_name: str
    raid_version: str


def parse_dell_idrac_info(string_table: StringTable) -> Section:
    return Section(
        serial=string_table[0][0],
        expresscode=string_table[0][1],
        bios_date=_format_date(string_table[0][2]),
        bios_version=string_table[0][3],
        bios_vendor=string_table[0][4],
        raid_name=string_table[0][5],
        raid_version=string_table[0][6],
    )


def _format_date(raw_date: str) -> Optional[float]:
    if fmt := _get_date_format(raw_date):
        return time.mktime(time.strptime(raw_date, fmt))
    return None


def _get_date_format(date: str) -> Optional[str]:
    # Beware: Dell's actual definition of the format supposed
    # to be here is yyyymmddHHMMSS.uuuuuu+ooo. This has *never*
    # been observed in the wild. More accurate appears to be
    # mm/dd/yyyy or 0mm/dd/yyyy or mm/0dd/yyyy. The 0 represents a
    # random 0 thrown in for good measure :/
    with suppress(IndexError):
        if date[2] == "/" and date[5] == "/":  # mm/dd/yyyy
            return "%m/%d/%Y"
        if date[3] == "/" and date[6] == "/":  # 0mm/dd/yyyy
            return "0%m/%d/%Y"
        if date[2] == "/" and date[6] == "/":  # mm/0dd/yyyy
            return "%m/0%d/%Y"
        if "/" not in date[:8]:  # In case of Dell devices following the MIB
            return "%Y%m%d"

    return None


def inventory_dell_idrac_info(info):
    section = parse_dell_idrac_info(info)

    inv_tree("hardware.system.").udpate(
        {
            "serial": section.serial,
            "expresscode": section.expresscode,
        }
    )

    inv_tree("software.bios.").update(
        {
            "version": section.bios_version,
            "vendor": section.bios_vendor,
            **({} if section.bios_date is None else {"date": section.bios_date}),
        }
    )

    inv_tree("hardware.storage.controller.").update(
        {
            "version": section.raid_version,
            "name": section.raid_name,
        }
    )


inv_info["dell_hw_info"] = {
    "inv_function": inventory_dell_idrac_info,
}
