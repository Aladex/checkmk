#!/usr/bin/env python3
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.diskstat import *  # pylint: disable=wildcard-import,unused-wildcard-import

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.scaleio import *  # pylint: disable=wildcard-import,unused-wildcard-import

ScaleioCheckResult = Iterable[tuple[int, str]]


def discover_scaleio_storage_pool_disks(section: ScaleioSection) -> tuple[str, Mapping]:
    for entry in section:
        yield entry, {}


def _check_scaleio_storage_pool_disks(
    item: str,
    params: Mapping[str, Any],
    section: ScaleioSection,
    read_data_field_name: str,
    write_data_field_name: str,
) -> ScaleioCheckResult:

    if not (storage_pool := section.get(item)):
        return

    yield 0, f"Name: {storage_pool['NAME'][0]}"

    yield from check_diskstat_dict(
        item,
        params,
        get_disks(
            item,
            storage_pool[read_data_field_name],
            storage_pool[write_data_field_name],
        ),
    )


def check_scaleio_storage_pool_totalrw(
    item: str, params: Mapping[str, Any], section: ScaleioSection
) -> ScaleioCheckResult:
    yield from _check_scaleio_storage_pool_disks(
        item,
        params,
        section,
        "TOTAL_READ_BWC",
        "TOTAL_WRITE_BWC",
    )


check_info["scaleio_storage_pool.totalrw"] = {
    "inventory_function": discover_scaleio_storage_pool_disks,
    "check_function": check_scaleio_storage_pool_totalrw,
    "service_description": "ScaleIO SP total IO %s",
    "has_perfdata": True,
    "group": "diskstat",
}


def check_scaleio_storage_pool_rebalancerw(
    item: str, params: Mapping[str, Any], section: ScaleioSection
) -> ScaleioCheckResult:
    yield from _check_scaleio_storage_pool_disks(
        item,
        params,
        section,
        "REBALANCE_READ_BWC",
        "REBALANCE_WRITE_BWC",
    )


check_info["scaleio_storage_pool.rebalancerw"] = {
    "inventory_function": discover_scaleio_storage_pool_disks,
    "check_function": check_scaleio_storage_pool_rebalancerw,
    "service_description": "ScaleIO SP rebalance IO %s",
    "has_perfdata": True,
    "group": "diskstat",
}
