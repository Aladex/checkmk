#!/usr/bin/env python3
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.diskstat import *  # pylint: disable=wildcard-import,unused-wildcard-import

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.scaleio import *  # pylint: disable=wildcard-import,unused-wildcard-import


def inventory_scaleio_storage_pool_totalrw(parsed):
    for entry in parsed:
        yield entry, {}


def check_scaleio_storage_pool_totalrw(item, params, parsed):
    data = get_scaleio_data(item, parsed)
    if not data:
        return

    yield 0, "Name: %s" % data["NAME"][0]

    read_data = data["TOTAL_READ_BWC"]
    write_data = data["TOTAL_WRITE_BWC"]
    for io_type in list(check_diskstat_dict(item, params, get_disks(item, read_data, write_data))):
        yield io_type


check_info["scaleio_storage_pool.totalrw"] = {
    "inventory_function": inventory_scaleio_storage_pool_totalrw,
    "check_function": check_scaleio_storage_pool_totalrw,
    "service_description": "ScaleIO SP total IO %s",
    "has_perfdata": True,
    "group": "diskstat",
}


def inventory_scaleio_storage_pool_rebalancerw(parsed):
    for entry in parsed:
        yield entry, {}


def check_scaleio_storage_pool_rebalancerw(item, params, parsed):
    data = get_scaleio_data(item, parsed)
    if not data:
        return

    yield 0, "Name: %s" % data["NAME"][0]

    read_data = data["REBALANCE_READ_BWC"]
    write_data = data["REBALANCE_WRITE_BWC"]
    for io_type in list(check_diskstat_dict(item, params, get_disks(item, read_data, write_data))):
        yield io_type


check_info["scaleio_storage_pool.rebalancerw"] = {
    "inventory_function": inventory_scaleio_storage_pool_rebalancerw,
    "check_function": check_scaleio_storage_pool_rebalancerw,
    "service_description": "ScaleIO SP rebalance IO %s",
    "has_perfdata": True,
    "group": "diskstat",
}
