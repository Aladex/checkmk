#!/usr/bin/env python3
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables needed for accessing discovery rulesets.

from cmk.base.check_legacy_includes.diskstat import *  # pylint: disable=wildcard-import,unused-wildcard-import

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.scaleio import *  # pylint: disable=wildcard-import,unused-wildcard-import

ScaleioCheckResult = Iterable[tuple[int, str]]


def discover_scaleio_storage_pool_disks(section: ScaleioStoragePoolSection) -> tuple[str, Mapping]:
    for entry in section:
        yield entry, {}


def _check_scaleio_storage_pool_disks(
    item: str,
    params: Mapping[str, Any],
    pool_name: str,
    disk_stats: DiskReadWrite,
) -> ScaleioCheckResult:

    yield 0, f"Name: {pool_name}"

    yield from check_diskstat_dict(
        item=item,
        params=params,
        disks={
            item: {
                "node": None,
                "read_ios": disk_stats.read_operations,
                "read_throughput": disk_stats.read_throughput,
                "write_ios": disk_stats.write_operations,
                "write_throughput": disk_stats.write_throughput,
            }
        },
    )


def check_scaleio_storage_pool_totalrw(
    item: str, params: Mapping[str, Any], section: ScaleioStoragePoolSection
) -> ScaleioCheckResult:
    if not (pool := section.get(item)):
        return

    yield from _check_scaleio_storage_pool_disks(
        item=item,
        params=params,
        pool_name=pool.name,
        disk_stats=pool.total_io,
    )


check_info["scaleio_storage_pool.totalrw"] = {
    "inventory_function": discover_scaleio_storage_pool_disks,
    "check_function": check_scaleio_storage_pool_totalrw,
    "service_description": "ScaleIO SP total IO %s",
    "has_perfdata": True,
    "group": "diskstat",
}


def check_scaleio_storage_pool_rebalancerw(
    item: str, params: Mapping[str, Any], section: ScaleioStoragePoolSection
) -> ScaleioCheckResult:
    if not (pool := section.get(item)):
        return

    yield from _check_scaleio_storage_pool_disks(
        item=item,
        params=params,
        pool_name=pool.name,
        disk_stats=pool.rebalance_io,
    )


check_info["scaleio_storage_pool.rebalancerw"] = {
    "inventory_function": discover_scaleio_storage_pool_disks,
    "check_function": check_scaleio_storage_pool_rebalancerw,
    "service_description": "ScaleIO SP rebalance IO %s",
    "has_perfdata": True,
    "group": "diskstat",
}
