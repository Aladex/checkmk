#!/usr/bin/env python3
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from typing import Any, Iterable, Mapping, NamedTuple

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.df import *  # pylint: disable=wildcard-import,unused-wildcard-import

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.size_trend import *  # pylint: disable=wildcard-import,unused-wildcard-import
from cmk.base.plugins.agent_based.agent_based_api.v1.type_defs import StringTable
from cmk.base.plugins.agent_based.utils.df import df_discovery

DiscoveryResult = Iterable[tuple[str, Mapping[str, Any]]]
CheckResult = Iterable[tuple[int, str, list]]

# <<<df_zos>>>
# SYS5.OMVS.ALF0.HFS         720          92        504       16% /ALF0
# HFS, Read/Write, Device:2, ACLS=Y
# Filetag : T=off   codeset=0
# ##########
# SYS5.OMVS.SYSPLEX.ROOT     720         224        372       38% /
# HFS, Read Only, Device:1, ACLS=Y
# Filetag : T=off   codeset=0
# ##########

# FS Types:
# AUTOMNT
# TFS
# ZFS
# NFS
# HFS


class MountPoint(NamedTuple):
    usage: tuple[str, float, float, float]
    options: set[str]


Section = Mapping[str, MountPoint]


_DF_ZOS_EXCLUDE_LIST = ["AUTOMNT", "TFS", "NFS"]


def parse_df_zos(string_table: StringTable) -> Section:
    section: dict[str, MountPoint] = {}
    usage: tuple[str, float, float, float] | None = None
    options: set[str] = set()

    for line in string_table:
        if line[0].startswith("#####"):
            # Add item for filesystem
            if usage and options:
                section[usage[0]] = MountPoint(usage, options)

            usage = None
            options = set()
        elif line[0].startswith("Filesystem"):
            # Ignore header line
            continue
        else:
            if usage is None:
                usage = (line[5], float(line[1]) / 1024.0, float(line[3]) / 1024.0, 0.0)
            elif not options:
                # Second line: filesystem options
                for option in line:
                    options.add(option.replace(",", ""))
                if "Read" in options and "Only" in options:
                    options.remove("Read")
                    options.remove("Only")
                    options.add("ReadOnly")
    return section


def discover_df_zos(section: Section) -> DiscoveryResult:
    mplist = [
        item
        for item, mp in section.items()
        if "Read/Write" in mp.options and not mp.options.intersection(_DF_ZOS_EXCLUDE_LIST)
    ]
    return df_discovery(host_extra_conf(host_name(), filesystem_groups), mplist)


def check_df_zos(item: str, params: Mapping[str, Any], section: Section) -> CheckResult:
    fslist = [mp.usage for mp in section.values()]
    return df_check_filesystem_list(item, params, fslist)


factory_settings["filesystem_default_levels"] = FILESYSTEM_DEFAULT_PARAMS


check_info["df_zos"] = {
    "parse_function": parse_df_zos,
    "inventory_function": discover_df_zos,
    "check_function": check_df_zos,
    "service_description": "Filesystem %s",
    "has_perfdata": True,
    "group": "filesystem",
    "default_levels_variable": "filesystem_default_levels",
}
