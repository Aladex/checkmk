#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from typing import Any, Iterable, Mapping, TypedDict

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.df import *  # pylint: disable=wildcard-import,unused-wildcard-import

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.size_trend import *  # pylint: disable=wildcard-import,unused-wildcard-import
from cmk.base.plugins.agent_based.agent_based_api.v1.type_defs import StringTable
from cmk.base.plugins.agent_based.utils.df import df_discovery

DiscoveryResult = Iterable[tuple[str, Mapping[str, Any]]]
CheckResult = Iterable[tuple[int, str, list]]

# <<<df_zos>>>
# SYS5.OMVS.ALF0.HFS         720          92        504       16% /ALF0
# HFS, Read/Write, Device:2, ACLS=Y
# Filetag : T=off   codeset=0
# ##########
# SYS5.OMVS.SYSPLEX.ROOT     720         224        372       38% /
# HFS, Read Only, Device:1, ACLS=Y
# Filetag : T=off   codeset=0
# ##########

# FS Types:
# AUTOMNT
# TFS
# ZFS
# NFS
# HFS


class MountPoint(TypedDict):
    size: list[str]
    options: list[str]


Section = Mapping[str, MountPoint]


def parse_df_zos(info: StringTable) -> Section:
    parsed: dict[str, MountPoint] = {}
    fs = None
    usage: list[str] = []
    options: list[str] = []

    for line in info:
        if line[0].startswith("#####"):
            # Add item for filesystem
            if fs and usage and options:
                parsed.setdefault(fs, {})
                parsed[fs].setdefault("size", usage)
                parsed[fs].setdefault("options", options)

            fs = None
            usage = []
            options = []
        elif line[0].startswith("Filesystem"):
            # Ignore header line
            continue
        else:
            if fs is None:
                # First line: filesystem with usage information
                fs = line[5]
                usage = line[1:5]
            elif not options:
                # Second line: filesystem options
                for option in line:
                    options.append(option.replace(",", ""))
                if "Read" in options and "Only" in options:
                    options.remove("Read")
                    options.remove("Only")
                    options.append("ReadOnly")
    return parsed


df_zos_exclude_list = ["AUTOMNT", "TFS", "NFS"]


def inventory_df_zos(parsed: Section) -> DiscoveryResult:
    mplist = []

    for item in parsed:
        fs_rw = False
        fs_ex = False

        # Check filesystem options
        for option in parsed[item]["options"]:
            # Check if filesystem is rw
            if option == "Read/Write":
                fs_rw = True

            # Check if filesystem is excluded
            if option in df_zos_exclude_list:
                fs_ex = True

        if fs_rw and not fs_ex:
            mplist.append(item)
    return df_discovery(host_extra_conf(host_name(), filesystem_groups), mplist)


def check_df_zos(item: str, params: Mapping[str, Any], parsed: Section) -> CheckResult:
    fslist = []

    for filesystem, fs_data in parsed.items():
        (size_mb, used_mb, avail_mb) = map(float, fs_data["size"][0:3])
        size_mb /= 1024
        used_mb /= 1024
        avail_mb /= 1024
        fslist.append((filesystem, size_mb, avail_mb, 0))

    return df_check_filesystem_list(item, params, fslist)


factory_settings["filesystem_default_levels"] = FILESYSTEM_DEFAULT_PARAMS


check_info["df_zos"] = {
    "parse_function": parse_df_zos,
    "check_function": check_df_zos,
    "inventory_function": inventory_df_zos,
    "service_description": "Filesystem %s",
    "has_perfdata": True,
    "group": "filesystem",
    "default_levels_variable": "filesystem_default_levels",
}
