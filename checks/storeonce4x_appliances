#!/usr/bin/env python3
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

import json
from typing import Any, Iterable, Mapping

from cmk.base.check_legacy_includes import storeonce
from cmk.base.plugins.agent_based.agent_based_api.v1.type_defs import StringTable
from cmk.base.plugins.agent_based.utils.df import FILESYSTEM_DEFAULT_PARAMS

DiscoveryResult = Iterable[tuple[str, Mapping]]

CheckResult = Iterable[tuple]


# If have no idea what exactly this is...
Appliance = Mapping[str, Any]

Section = Mapping[str, Appliance]

_APP_STATE_MAP = {"Reachable": 0}

# Currently used metrics
_PROPERTIES_FEDERATION = (
    "hostname",
    "address",
    "productName",
    "serialNumber",
    "localhost",
    "applianceState",
    "stateUpdatedDate",
    "federationApiVersion",
    "applianceStateString",
    "sinceStateUpdatedSeconds",
)

_PROPERTIES_DASHBOARD = (
    "softwareUpdateRecommended",
    "softwareVersion",
    "localFreeBytes",
    "localCapacityBytes",
    "cloudFreeBytes",
    "cloudCapacityBytes",
    "metricsCpuTotal",
    "metricsMemoryUsedPercent",
    "metricsDataDiskUtilisationPercent",
    "applianceStatusString",
    "dataServicesStatusString",
    "licenseStatus",
    "licenseStatusString",
    "userStorageStatusString",
    "hardwareStatusString",
    "catStoresSummary",
    "cloudBankStoresSummary",
    "nasSharesSummary",
    "vtlLibrariesSummary",
    "nasRepMappingSummary",
    "vtlRepMappingSummary",
    "dedupeRatio",
)


_LICENSE_MAP = {
    "OK": 0,
    "WARNING": 1,
    "CRITICAL": 2,
    "NOT_HARDWARE": 3,
    "NOT_APPLICABLE": 3,
}


def parse_storeonce4x_appliances(string_table: StringTable) -> Section:

    parsed: dict[str, dict[str, Any]] = {}

    federation_json = json.loads(string_table[0][0])
    dashboard_json_list = [json.loads(json_obj[0]) for json_obj in string_table[1:]]

    for member in federation_json["members"]:

        hostname = member["hostname"]

        parsed[hostname] = {}
        for mem_property in _PROPERTIES_FEDERATION:
            parsed[hostname][mem_property] = member[mem_property]

        parsed[hostname]["cmk_state"] = _APP_STATE_MAP.get(member["applianceStateString"], 3)

    # For every member uuid, we have more metrics in the dashboard
    for hostname in parsed:
        for dashboard_elem in dashboard_json_list:
            if hostname == dashboard_elem["hostname"]:
                for dashboard_property in _PROPERTIES_DASHBOARD:
                    parsed[hostname][dashboard_property] = dashboard_elem[dashboard_property]

        # Calculate missing metrics (which where previously available in REST API 3x)
        for name in ("Free", "Capacity"):
            parsed[hostname]["combined%sBytes" % name] = (
                parsed[hostname]["cloud%sBytes" % name] + parsed[hostname]["local%sBytes" % name]
            )

    return parsed


def discover_storeonce4x_appliances(section: Section) -> DiscoveryResult:
    yield from ((host, {}) for host in section)


def check_storeonce4x_appliances(
    item: str, params: Mapping[str, Any], section: Section
) -> CheckResult:
    if (data := section.get(item)) is None:
        return
    yield data[
        "cmk_state"
    ], "State: %s, Serial Number: %s, Software version: %s, Product Name: %s" % (
        data["applianceStateString"],
        data["serialNumber"],
        data["softwareVersion"],
        data["productName"],
    )


check_info["storeonce4x_appliances"] = {
    "parse_function": parse_storeonce4x_appliances,
    "inventory_function": discover_storeonce4x_appliances,
    "check_function": check_storeonce4x_appliances,
    "service_description": "Appliance %s Status",
}


def check_storeonce4x_appliances_storage(
    item: str, params: Mapping[str, Any], section: Section
) -> CheckResult:
    if (data := section.get(item)) is None:
        return
    yield from storeonce.check_storeonce_space(item, params, data)


check_info["storeonce4x_appliances.storage"] = {
    "inventory_function": discover_storeonce4x_appliances,
    "check_function": check_storeonce4x_appliances_storage,
    "service_description": "Appliance %s Storage",
    "group": "filesystem",
    "has_perfdata": True,
    "default_levels_variable": "filesystem_default_levels",
}

factory_settings["filesystem_default_levels"] = FILESYSTEM_DEFAULT_PARAMS


def check_storeonce4x_appliances_license(
    item: str, params: Mapping[str, Any], section: Section
) -> CheckResult:
    if (data := section.get(item)) is None:
        return

    yield _LICENSE_MAP.get(data["licenseStatus"], 3), "Status: %s" % data["licenseStatusString"]


check_info["storeonce4x_appliances.license"] = {
    "inventory_function": discover_storeonce4x_appliances,
    "check_function": check_storeonce4x_appliances_license,
    "service_description": "Appliance %s License",
}


def check_storeonce4x_appliances_summaries(
    item: str, param: Mapping[str, Any], section: Section
) -> CheckResult:
    if (data := section.get(item)) is None:
        return

    for summary, summary_descr in (
        ("catStoresSummary", "Cat stores"),
        ("cloudBankStoresSummary", "Cloud bank"),
        ("nasSharesSummary", "NAS Shares"),
        ("vtlLibrariesSummary", "VTL Libraries"),
        ("nasRepMappingSummary", "NAS Replication Mapping"),
        ("vtlRepMappingSummary", "VTL Replication Mapping"),
    ):
        for descr, state in (("Ok", 0), ("Warning", 1), ("Critical", 2), ("Unknown", 3)):
            numbers = data[summary]["statusSummary"]["num%s" % descr]
            total = data[summary]["statusSummary"]["total"]
            if numbers == 0:
                continue
            yield state, "%s %s (%s of %s)" % (summary_descr, descr, str(numbers), str(total))


check_info["storeonce4x_appliances.summaries"] = {
    "parse_function": parse_storeonce4x_appliances,
    "inventory_function": discover_storeonce4x_appliances,
    "check_function": check_storeonce4x_appliances_summaries,
    "service_description": "Appliance %s Summaries",
}
