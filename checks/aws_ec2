#!/usr/bin/env python3
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.
from typing import Any, Mapping

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.aws import *  # pylint: disable=wildcard-import,unused-wildcard-import

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.cpu_util import *  # pylint: disable=wildcard-import,unused-wildcard-import

#   .--status check--------------------------------------------------------.
#   |           _        _                    _               _            |
#   |       ___| |_ __ _| |_ _   _ ___    ___| |__   ___  ___| | __        |
#   |      / __| __/ _` | __| | | / __|  / __| '_ \ / _ \/ __| |/ /        |
#   |      \__ \ || (_| | |_| |_| \__ \ | (__| | | |  __/ (__|   <         |
#   |      |___/\__\__,_|\__|\__,_|___/  \___|_| |_|\___|\___|_|\_\        |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   |                            main check                                |
#   '----------------------------------------------------------------------'

Section = Mapping[str, float]


def discover_aws_ec2(section: Section):
    yield from inventory_aws_generic_single(
        section,
        [
            "StatusCheckFailed_System",
            "StatusCheckFailed_Instance",
        ],
    )


def check_aws_ec2_status_check(item: str, params: Mapping[str, Any], section: Section):
    key_pairs: Mapping[str, str] = {
        "System": "StatusCheckFailed_System",
        "Instance": "StatusCheckFailed_Instance",
    }

    go_stale = True
    for key, section_key in key_pairs.items():
        if (value := section.get(section_key)) is None:
            continue

        state, summary = (0, "passed") if value < 1.0 else (2, "failed")
        yield state, f"{key}: {summary}"
        go_stale = False

    if go_stale:
        raise MKCounterWrapped("Currently no data from AWS")


check_info["aws_ec2"] = {
    "inventory_function": discover_aws_ec2,
    "check_function": check_aws_ec2_status_check,
    "service_description": "AWS/EC2 Status Check",
}

# .
#   .--CPU credits---------------------------------------------------------.
#   |           ____ ____  _   _                     _ _ _                 |
#   |          / ___|  _ \| | | |   ___ _ __ ___  __| (_) |_ ___           |
#   |         | |   | |_) | | | |  / __| '__/ _ \/ _` | | __/ __|          |
#   |         | |___|  __/| |_| | | (__| | |  __/ (_| | | |_\__ \          |
#   |          \____|_|    \___/   \___|_|  \___|\__,_|_|\__|___/          |
#   |                                                                      |
#   '----------------------------------------------------------------------'

factory_settings["aws_cpu_credits"] = {
    "balance_levels_lower": (10, 5),
}


def check_aws_ec2_cpu_credits(item, params, parsed):
    return check_aws_metrics(
        [
            {
                "metric_val": parsed.get(cw_metric_name),
                "metric_name": metric_name,
                "levels": levels,
                "human_readable_func": human_readable_func,
                "info_name": info_name,
            }
            for cw_metric_name, metric_name, levels, human_readable_func, info_name in zip(
                ["CPUCreditUsage", "CPUCreditBalance"],
                [None, "aws_cpu_credit_balance"],
                [None, (None, None) + params["balance_levels_lower"]],
                [lambda x: "%.2f" % x] * 2,
                ["Usage", "Balance"],
            )
        ]
    )


check_info["aws_ec2.cpu_credits"] = {
    "inventory_function": lambda p: inventory_aws_generic_single(
        p,
        ["CPUCreditUsage", "CPUCreditBalance"],
    ),
    "check_function": check_aws_ec2_cpu_credits,
    "service_description": "AWS/EC2 CPU Credits",
    "group": "aws_ec2_cpu_credits",
    "default_levels_variable": "aws_cpu_credits",
    "has_perfdata": True,
}

# .
#   .--CPU utilization-----------------------------------------------------.
#   |    ____ ____  _   _         _   _ _ _          _   _                 |
#   |   / ___|  _ \| | | |  _   _| |_(_) (_)______ _| |_(_) ___  _ __      |
#   |  | |   | |_) | | | | | | | | __| | | |_  / _` | __| |/ _ \| '_ \     |
#   |  | |___|  __/| |_| | | |_| | |_| | | |/ / (_| | |_| | (_) | | | |    |
#   |   \____|_|    \___/   \__,_|\__|_|_|_/___\__,_|\__|_|\___/|_| |_|    |
#   |                                                                      |
#   '----------------------------------------------------------------------'

factory_settings["aws_ec2_cpu_util_default_levels"] = {
    "util": (90.0, 95.0),
}


def check_aws_ec2_cpu_util(item, params, parsed):
    if "CPUUtilization" not in parsed:
        raise MKCounterWrapped("Currently no data from AWS")
    return check_cpu_util(parsed["CPUUtilization"], params, time.time())


check_info["aws_ec2.cpu_util"] = {
    "inventory_function": lambda p: inventory_aws_generic_single(
        p,
        ["CPUUtilization"],
    ),
    "check_function": check_aws_ec2_cpu_util,
    "service_description": "AWS/EC2 CPU utilization",
    "group": "cpu_utilization",
    "default_levels_variable": "aws_ec2_cpu_util_default_levels",
    "has_perfdata": True,
}
