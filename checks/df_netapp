#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from typing import Sequence

from cmk.base.check_legacy_includes.df import df_check_filesystem_list, filesystem_groups
from cmk.base.plugins.agent_based.agent_based_api.v1.type_defs import StringTable
from cmk.base.plugins.agent_based.utils.df import df_discovery, FILESYSTEM_DEFAULT_PARAMS

Section = Sequence[tuple[str, float, float, float]]


def parse_df_netapp(string_table: StringTable) -> Section:
    section = []
    for name, size_kb, used_kb in string_table:
        if not size_kb:
            continue
        size_mb = float(size_kb) / 1024.0
        section.append((name, size_mb, size_mb - float(used_kb) / 1024.0, 0.0))
    return section


def inventory_df_netapp(section: Section):
    mplist = [
        volume
        for volume, size, *_rest in section
        if size > 0  # Exclude filesystems with zero size (some snapshots)
    ]
    return df_discovery(host_extra_conf(host_name(), filesystem_groups), mplist)


def check_df_netapp(item, params, section: Section):
    fslist = [mp for mp in section if "patterns" in params or item == mp[0]]
    return df_check_filesystem_list(item, params, fslist)


def is_netapp_filer(oid) -> bool:
    return "ontap" in oid(".1.3.6.1.2.1.1.1.0").lower() or oid(".1.3.6.1.2.1.1.2.0").startswith(
        ".1.3.6.1.4.1.789"
    )


factory_settings["filesystem_default_levels"] = FILESYSTEM_DEFAULT_PARAMS


check_info["df_netapp"] = {
    "parse_function": parse_df_netapp,
    "check_function": check_df_netapp,
    "inventory_function": inventory_df_netapp,
    "service_description": "Filesystem %s",
    "has_perfdata": True,
    "snmp_info": (".1.3.6.1.4.1.789.1.5.4.1", [2, 29, 30]),
    "snmp_scan_function": lambda oid: is_netapp_filer(oid) and oid(".1.3.6.1.4.1.789.1.5.4.1.29.*"),
    "group": "filesystem",
    "default_levels_variable": "filesystem_default_levels",
}


check_info["df_netapp32"] = {
    "parse_function": parse_df_netapp,
    "check_function": check_df_netapp,
    "inventory_function": inventory_df_netapp,
    "service_description": "Filesystem %s",
    "has_perfdata": True,
    "snmp_info": (".1.3.6.1.4.1.789.1.5.4.1", [2, 3, 4]),
    "snmp_scan_function": lambda oid: is_netapp_filer(oid)
    and not oid(".1.3.6.1.4.1.789.1.5.4.1.29.*"),
    "group": "filesystem",
    "default_levels_variable": "filesystem_default_levels",
}
