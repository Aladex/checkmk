#!/usr/bin/env python3
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from typing import Any, Iterable, Mapping, Sequence

from cmk.base.check_legacy_includes.netapp_api import discover_single_items
from cmk.base.plugins.agent_based.agent_based_api.v1.type_defs import StringTable
from cmk.base.plugins.agent_based.utils import netapp_api

DiscoveryResult = Iterable[tuple[str, Mapping[str, Any]]]
CheckResult = Iterable[tuple[int, str]]


# <<<netapp_api_psu:sep(9)>>>
# power-supply-list 20    is-auto-power-reset-enabled false   power-supply-part-no 114-00065+A2 ...
# power-supply-list 20    is-auto-power-reset-enabled false   power-supply-part-no 114-00065+A2 ...


def parse_netapp_api_psu(string_table: StringTable) -> netapp_api.SectionSingleInstance:
    return netapp_api.parse_netapp_api_single_instance(
        string_table,
        custom_keys=["power-supply-list", "power-supply-element-number"],
        item_func=None,
    )


check_info["netapp_api_psu"] = {
    "parse_function": parse_netapp_api_psu,
}

discovery_netapp_api_psu_rules = []


def _format_item(key: str) -> str:
    return key.replace(".", "/")


def discovery_netapp_api_psu(section: netapp_api.SectionSingleInstance) -> DiscoveryResult:
    if discover_single_items(discovery_netapp_api_psu_rules):
        for key in _get_psus_with_power_supply(section):
            item_name = _format_item(key)
            yield item_name, {}


def check_netapp_api_psu(
    item: str,
    _no_params,
    section: netapp_api.SectionSingleInstance,
) -> CheckResult:
    psu = section.get("%s.%s" % tuple(item.split("/")))
    if not psu:
        return

    if psu.get("power-supply-is-error") == "true":
        yield 2, "Error in PSU %s" % psu["power-supply-element-number"]
    else:
        yield 0, "Operational state OK"


check_info["netapp_api_psu"].update(
    {
        "check_function": check_netapp_api_psu,
        "inventory_function": discovery_netapp_api_psu,
        "service_description": "Power Supply Shelf %s",
    }
)


def discovery_netapp_api_psu_summary(section: netapp_api.SectionSingleInstance) -> DiscoveryResult:
    if discover_single_items(discovery_netapp_api_psu_rules):
        return
    if _get_psus_with_power_supply(section):
        yield "Summary", {}


def _get_psus_with_power_supply(
    psus: Mapping[str, netapp_api.Instance]
) -> Mapping[str, netapp_api.Instance]:
    return {
        key: psu for key, psu in psus.items() if psu.get("power-supply-is-not-installed") != "true"
    }


def _get_failed_power_supply_elements(psus: Mapping[str, netapp_api.Instance]) -> Sequence[str]:
    erred_psus = []
    for key, value in psus.items():
        if value.get("power-supply-is-error") == "true":
            erred_psus.append(_format_item(key))
    return erred_psus


def check_netapp_api_psu_summary(
    item: str,
    _no_params,
    section: netapp_api.SectionSingleInstance,
):
    psus = _get_psus_with_power_supply(section)
    yield 0, "%d power supply units in total" % len(psus)

    erred_psus = _get_failed_power_supply_elements(psus)
    if erred_psus:
        erred_psus_names = ", ".join(erred_psus)
        count = len(erred_psus)
        yield 2, "%d power supply unit%s in error state (%s)" % (
            count,
            "" if count == 1 else "s",
            erred_psus_names,
        )


check_info["netapp_api_psu.summary"] = {
    "check_function": check_netapp_api_psu_summary,
    "inventory_function": discovery_netapp_api_psu_summary,
    "service_description": "Power Supply Shelf %s",
}
