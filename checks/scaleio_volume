#!/usr/bin/env python3
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.
from typing import NamedTuple

from cmk.base.api.agent_based.type_defs import StringTable

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.diskstat import *  # pylint: disable=wildcard-import,unused-wildcard-import

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.scaleio import *  # pylint: disable=wildcard-import,unused-wildcard-import

# <<<scaleio_volume>>>
# VOLUME f6a9425800000002:
#        ID                                                 f6a9425800000002
#        NAME                                               SEASIOCF1001
#        SIZE                                               8.0 TB (8192 GB)
#        USER_DATA_READ_BWC                                 0 IOPS 0 Bytes per-second
#        USER_DATA_WRITE_BWC                                0 IOPS 0 Bytes per-second
#
# VOLUME f6a9425900000003:
#        ID                                                 f6a9425900000003
#        NAME                                               SEASIOCF2001
#        SIZE                                               5.0 TB (5120 GB)
#        USER_DATA_READ_BWC                                 0 IOPS 0 Bytes per-second
#        USER_DATA_WRITE_BWC                                0 IOPS 0 Bytes per-second
#


class ScaleioVolume(NamedTuple):
    volume_id: str
    name: str
    size: float
    size_unit: str
    read_ios: Sequence[str]
    write_ios: Sequence[str]


ScaleioVolumeSection = Mapping[str, ScaleioVolume]


def parse_scaleio_volume(string_table: StringTable) -> ScaleioVolumeSection:
    section: MutableMapping[str, ScaleioVolume] = {}
    for volume_id, volume in parse_scaleio(string_table, "VOLUME").items():
        section[volume_id] = ScaleioVolume(
            volume_id=volume_id,
            name=volume["NAME"][0],
            size=float(volume["SIZE"][0]),
            size_unit=volume["SIZE"][1],
            read_ios=volume["USER_DATA_READ_BWC"],
            write_ios=volume["USER_DATA_WRITE_BWC"],
        )


def discover_scaleio_volume(section):
    for volume_id in section:
        yield volume_id, {}


def check_scaleio_volume(item: str, params: Mapping[str, Any], section: ScaleioVolumeSection):
    change_unit = {
        "KB": "MB",
        "MB": "GB",
        "GB": "TB",
    }
    if not (volume := section.get(item)):
        return

    total = volume.size
    unit = volume.size_unit
    # Assuming the API will never report
    # a number bigger than 1048576
    if total > 1024:
        total = total // 1024
        unit = change_unit[unit]
    yield 0, f"Name: {volume.name}, Size: {total:.1f} {unit}"

    for io_type in list(
        check_diskstat_dict(
            item,
            params,
            get_disks(
                item,
                volume.read_ios,
                volume.write_ios,
            ),
        )
    ):
        yield io_type


check_info["scaleio_volume"] = {
    "parse_function": parse_scaleio_volume,
    "inventory_function": discover_scaleio_volume,
    "check_function": check_scaleio_volume,
    "service_description": "ScaleIO Volume %s",
    "has_perfdata": True,
    "group": "diskstat",
}
