#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from cmk.base.plugins.agent_based.utils import netapp_api

# consideration of health status and port speed availability status quo
discovery_netapp_api_ports_ignored = []


def parse_netapp_ports(info):
    def port_name(name, values):
        try:
            return "%s port %s" % (values["port-type"].capitalize(), name)
        except KeyError:
            return name

    return netapp_api.parse_netapp_api_single_instance(info, custom_keys=None, item_func=port_name)


def discovery_netapp_api_port(parsed):
    params = host_extra_conf_merged(host_name(), discovery_netapp_api_ports_ignored)
    ignored_ports = params.get("ignored_ports", ())
    for item, values in parsed.items():
        if values.get("port-type") in ignored_ports:
            continue
        if "health-status" in values:
            yield item, {}


def check_netapp_api_port(item, params, section):
    if (data := section.get(item)) is None:
        return

    health_state = data.get("health-status", "unknown")
    status = {"healthy": 0, "unknown": 3}.get(health_state, 2)
    yield status, "Health status: %s, Operational speed: %s" % (
        health_state,
        data.get("operational-speed", "undetermined"),
    )


check_info["netapp_api_ports"] = {
    "check_function": check_netapp_api_port,
    "inventory_function": discovery_netapp_api_port,
    "parse_function": parse_netapp_ports,
    "service_description": "%s",
}
