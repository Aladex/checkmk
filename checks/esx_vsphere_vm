#!/usr/bin/env python3
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# .
#   .--Name----------------------------------------------------------------.
#   |                     _   _                                            |
#   |                    | \ | | __ _ _ __ ___   ___                       |
#   |                    |  \| |/ _` | '_ ` _ \ / _ \                      |
#   |                    | |\  | (_| | | | | | |  __/                      |
#   |                    |_| \_|\__,_|_| |_| |_|\___|                      |
#   |                                                                      |
#   '----------------------------------------------------------------------'


def inventory_esx_vsphere_vm_name(section):
    if "name" in section:
        return [(None, None)]
    return []


def check_esx_vsphere_vm_name(_no_item, _no_params, section):
    name = section.get("name")
    if name:
        return 0, " ".join(name)
    return None


check_info["esx_vsphere_vm.name"] = {
    "inventory_function": inventory_esx_vsphere_vm_name,
    "check_function": check_esx_vsphere_vm_name,
    "service_description": "ESX Name",
}

# .
#   .--Runtime Host--------------------------------------------------------.
#   |    ____              _   _                  _   _           _        |
#   |   |  _ \ _   _ _ __ | |_(_)_ __ ___   ___  | | | | ___  ___| |_      |
#   |   | |_) | | | | '_ \| __| | '_ ` _ \ / _ \ | |_| |/ _ \/ __| __|     |
#   |   |  _ <| |_| | | | | |_| | | | | | |  __/ |  _  | (_) \__ \ |_      |
#   |   |_| \_\\__,_|_| |_|\__|_|_| |_| |_|\___| |_| |_|\___/|___/\__|     |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   |                                                                      |
#   '----------------------------------------------------------------------'


def inventory_esx_vsphere_vm_running_on(section):
    if "runtime.host" in section:
        yield None, None


def check_esx_vsphere_vm_running_on(no_item, no_params, section):
    running_on = section.get("runtime.host")
    if not running_on:
        return 3, "Runtime host information is missing"

    return 0, "Running on %s" % running_on[0]


check_info["esx_vsphere_vm.running_on"] = {
    "inventory_function": inventory_esx_vsphere_vm_running_on,
    "check_function": check_esx_vsphere_vm_running_on,
    "service_description": "ESX Hostsystem",
}


# .
#   .--Heartbeat-----------------------------------------------------------.
#   |           _   _                 _   _                _               |
#   |          | | | | ___  __ _ _ __| |_| |__   ___  __ _| |_             |
#   |          | |_| |/ _ \/ _` | '__| __| '_ \ / _ \/ _` | __|            |
#   |          |  _  |  __/ (_| | |  | |_| |_) |  __/ (_| | |_             |
#   |          |_| |_|\___|\__,_|_|   \__|_.__/ \___|\__,_|\__|            |
#   |                                                                      |
#   '----------------------------------------------------------------------'


# Possible values (this list is taken from the official documentation)
#    gray - VMware Tools are not installed or not running.
#    red - No heartbeat. Guest operating system may have stopped responding.
#    yellow - Intermittent heartbeat. May be due to guest load.
#    green - Guest operating system is responding normally.
#
def inventory_esx_vsphere_vm_hb_status(section):
    if "guestHeartbeatStatus" in section:
        return [(None, {})]
    return []


def check_esx_vsphere_vm_hb_status(_no_item, params, section):
    if section.get("guestHeartbeatStatus") is None:
        return None

    vm_status = section["guestHeartbeatStatus"][0]
    state = 3

    vm_heartbeat_map = {
        "gray": (1, "heartbeat_no_tools"),
        "green": (0, "heartbeat_ok"),
        "red": (2, "heartbeat_missing"),
        "yellow": (1, "heartbeat_intermittend"),
    }
    if vm_status in vm_heartbeat_map:
        if params:
            state = params.get(vm_heartbeat_map.get(vm_status)[1], 3)
        else:
            state = vm_heartbeat_map.get(vm_status)[0]
        if vm_status == "gray":
            return state, "No VMware Tools installed, outdated or not running"
        return state, "Heartbeat status is %s" % vm_status

    return 3, "Unknown heartbeat status %s" % vm_status


check_info["esx_vsphere_vm.heartbeat"] = {
    "inventory_function": inventory_esx_vsphere_vm_hb_status,
    "check_function": check_esx_vsphere_vm_hb_status,
    "service_description": "ESX Heartbeat",
    "group": "vm_heartbeat",
}


# .
#   .--VM devices----------------------------------------------------------.
#   |         __     ____  __       _            _                         |
#   |         \ \   / /  \/  |   __| | _____   _(_) ___ ___  ___           |
#   |          \ \ / /| |\/| |  / _` |/ _ \ \ / / |/ __/ _ \/ __|          |
#   |           \ V / | |  | | | (_| |  __/\ V /| | (_|  __/\__ \          |
#   |            \_/  |_|  |_|  \__,_|\___| \_/ |_|\___\___||___/          |
#   |                                                                      |
#   '----------------------------------------------------------------------'


def parse_esx_vsphere_vm_mounted_devices(section):
    data = section.get("config.hardware.device", [])
    parsed = {}
    for device_data in " ".join(data).split("@@"):
        if "|" not in device_data:
            continue
        device_attrs = {}
        for entry in device_data.split("|"):
            k, v = entry.split(" ", 1)
            device_attrs.setdefault(k, v)
        device_name = device_attrs["label"]
        del device_attrs["label"]
        parsed.setdefault(device_name, device_attrs)
    return parsed


def inventory_esx_vsphere_vm_mounted_devices(section):
    if parse_esx_vsphere_vm_mounted_devices(section):
        return [(None, None)]
    return []


def check_esx_vsphere_vm_mounted_devices(item, params, section):
    device_types = ["VirtualCdrom", "VirtualFloppy"]
    mounted_devices = []
    for device_name, attrs in parse_esx_vsphere_vm_mounted_devices(section).items():
        if attrs["virtualDeviceType"] in device_types and attrs["connected"] == "true":
            mounted_devices.append(device_name)

    if mounted_devices:
        return 1, "HA functionality not guaranteed, Mounted devices: %s" % ", ".join(
            mounted_devices
        )
    return 0, "HA functionality guaranteed"


check_info["esx_vsphere_vm.mounted_devices"] = {
    "inventory_function": inventory_esx_vsphere_vm_mounted_devices,
    "check_function": check_esx_vsphere_vm_mounted_devices,
    "service_description": "ESX Mounted Devices",
}
