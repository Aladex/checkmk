#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# <<<postgres_conn_time>>>
# 0.063

# instances
# <<<postgres_conn_time>>>
# [[[foobar]]]
# 0.063

INCONSISTENT_DATA = "inconsistent_data"


def parse_postgres_conn_time(info):
    parsed = {}
    instance_name = ""
    for line in info:
        if line[0].startswith("[[[") and line[0].endswith("]]]"):
            instance_name = line[0][3:-3].upper()
            continue
        try:
            parsed.setdefault(instance_name, float(line[0]))
        except (ValueError, IndexError):
            parsed.setdefault(instance_name, INCONSISTENT_DATA)
    return parsed


def inventory_postgres_conn_time(parsed):
    for instance_name in parsed:
        yield instance_name, None


def check_postgres_conn_time(item, _no_params, parsed):
    if item in parsed:
        conn_time = parsed[item]

        if conn_time == INCONSISTENT_DATA:
            return 1, "Failed to measure connection time (Inconsistent data from datasource)"

        return 0, "%s seconds" % conn_time, [("connection_time", conn_time)]

    # In case of missing information we assume that the login into
    # the database has failed and we simply skip this check. It won't
    # switch to UNKNOWN, but will get stale.
    raise MKCounterWrapped("Login into database failed")


check_info['postgres_conn_time'] = {
    "parse_function": parse_postgres_conn_time,
    "inventory_function": inventory_postgres_conn_time,
    "check_function": check_postgres_conn_time,
    "service_description": "PostgreSQL Connection Time %s",
    "has_perfdata": True
}
