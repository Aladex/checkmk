#!/usr/bin/env python3
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from typing import Any, Iterable, Mapping, Sequence

from cmk.base.check_legacy_includes.df import df_check_filesystem_list, filesystem_groups
from cmk.base.check_legacy_includes.ucd_hr import is_hr
from cmk.base.plugins.agent_based.agent_based_api.v1.type_defs import StringTable
from cmk.base.plugins.agent_based.utils.df import (
    df_discovery,
    EXCLUDED_MOUNTPOINTS,
    FILESYSTEM_DEFAULT_PARAMS,
    FSBlock,
)

# .1.3.6.1.2.1.25.2.3.1.2.1 .1.3.6.1.2.1.25.2.1.2 --> HOST-RESOURCES-MIB::hrStorageType.1
# .1.3.6.1.2.1.25.2.3.1.2.3 .1.3.6.1.2.1.25.2.1.3 --> HOST-RESOURCES-MIB::hrStorageType.3
# .1.3.6.1.2.1.25.2.3.1.3.1 Physical memory --> HOST-RESOURCES-MIB::hrStorageDescr.1
# .1.3.6.1.2.1.25.2.3.1.3.3 Virtual memory --> HOST-RESOURCES-MIB::hrStorageDescr.3
# .1.3.6.1.2.1.25.2.3.1.4.1 1024 --> HOST-RESOURCES-MIB::hrStorageAllocationUnits.1
# .1.3.6.1.2.1.25.2.3.1.4.3 1024 --> HOST-RESOURCES-MIB::hrStorageAllocationUnits.3
# .1.3.6.1.2.1.25.2.3.1.5.1 8122520 --> HOST-RESOURCES-MIB::hrStorageSize.1
# .1.3.6.1.2.1.25.2.3.1.5.3 21230740 --> HOST-RESOURCES-MIB::hrStorageSize.3
# .1.3.6.1.2.1.25.2.3.1.6.1 7749124 --> HOST-RESOURCES-MIB::hrStorageUsed.1
# .1.3.6.1.2.1.25.2.3.1.6.3 7749124 --> HOST-RESOURCES-MIB::hrStorageUsed.3


DiscoveryResult = Iterable[tuple[str, Mapping[str, Any]]]
CheckResult = tuple[int, str, list]

Section = Sequence[FSBlock]


def _to_mb(raw: str, unit_size: int) -> float:
    unscaled = int(raw)
    if unscaled < 0:
        unscaled += 2**32
    return unscaled * unit_size / 1048576.0


def parse_hr_fs(string_table: StringTable) -> Section:
    section = []
    for hrtype, hrdescr, hrunits, hrsize, hrused in string_table:
        # NOTE: These types are defined in the HR-TYPES-MIB.
        #       .1.3.6.1.2.1.25.2.1 +
        #                           +-> .4 "hrStorageFixedDisk"
        if hrtype not in {
            ".1.3.6.1.2.1.25.2.1.4",
            # This strange value below is needed for VCenter Appliances
            ".1.3.6.1.2.1.25.2.3.1.2.4",
        }:
            continue

        try:
            unit_size = int(hrunits)
            size_mb = _to_mb(hrsize, unit_size)
            used_mb = _to_mb(hrused, unit_size)
        except ValueError:
            continue

        section.append((fix_hr_fs_mountpoint(hrdescr), size_mb, size_mb - used_mb, 0))

    return section


check_info["hr_fs"] = {
    "parse_function": parse_hr_fs,
    "snmp_info": (
        ".1.3.6.1.2.1.25.2.3.1",
        [
            2,  # hrStorageType
            3,  # hrStorageDescr
            4,  # hrStorageAllocationUnits
            5,  # hrStorageSize
            6,  # hrStorageUsed
        ],
    ),
    "snmp_scan_function": is_hr,
}


# Juniper devices put information about the device into the
# field where we expect the mount point. Ugly. Remove that crap.
def fix_hr_fs_mountpoint(mp: str) -> str:
    mp = mp.replace("\\", "/")
    if "mounted on:" in mp:
        return mp.rsplit(":", 1)[-1].strip()
    if "Label:" in mp:
        pos = mp.find("Label:")
        return mp[:pos].rstrip()
    return mp


def discover_hr_fs(section: Section) -> DiscoveryResult:
    mplist = [
        descr for descr, _size, _avail, _reserved in section if descr not in EXCLUDED_MOUNTPOINTS
    ]
    return df_discovery(host_extra_conf(host_name(), filesystem_groups), mplist)


def check_hr_fs(item: str, params: Mapping[str, Any], section: Section) -> CheckResult:

    if "Label:" in item or "\\" in item:
        return 3, "check had an incompatible change, please re-discover services on this host", []

    return df_check_filesystem_list(item, params, section)


factory_settings["filesystem_default_levels"] = FILESYSTEM_DEFAULT_PARAMS


check_info["hr_fs"].update(
    {
        "inventory_function": discover_hr_fs,
        "check_function": check_hr_fs,
        "service_description": "Filesystem %s",
        "has_perfdata": True,
        "group": "filesystem",
        "default_levels_variable": "filesystem_default_levels",
        "management_board": HOST_ONLY,
    }
)
