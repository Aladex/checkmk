#!/usr/bin/env python3
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.


# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables needed for accessing discovery rulesets.
from typing import Mapping, TypedDict

from cmk.base.check_legacy_includes.diskstat import *  # pylint: disable=wildcard-import,unused-wildcard-import
from cmk.base.check_legacy_includes.ucd_hr import *  # pylint: disable=wildcard-import,unused-wildcard-import
from cmk.base.plugins.agent_based.agent_based_api.v1.type_defs import StringTable


class Disk(TypedDict):
    disk_index: str
    read_throughput: int
    write_throughput: int
    read_ios: int
    write_ios: int


Section = Mapping[str, Disk]


def parse_ucd_diskio(string_table: StringTable) -> Section:

    section: MutableMapping[str, Disk] = {}

    if not string_table:
        return section

    for line in string_table:
        if len(line) != 6:
            continue

        disk_index, name, read_size, write_size, read, write = line
        try:
            section[name] = {
                "disk_index": disk_index,
                "read_throughput": int(read_size),
                "write_throughput": int(write_size),
                "read_ios": int(read),
                "write_ios": int(write),
            }
        except ValueError:
            pass

    return section


check_info["ucd_diskio"] = {
    "parse_function": parse_ucd_diskio,
    "snmp_info": (
        ".1.3.6.1.4.1.2021.13.15.1.1",
        [
            "1",  # diskIOIndex
            "2",  # diskIODevice
            "3",  # diskIONRead
            "4",  # diskIONWritten
            "5",  # diskIOReads
            "6",  # diskIOWrites
        ],
    ),
    "snmp_scan_function": is_ucd,
}


def discover_ucd_diskio(section: Section):
    yield from ((disk, {}) for disk in section)


def check_ucd_diskio(
    item: str,
    params: Mapping[str, Any],
    section: Section,
):
    if (disk := section.get(item)) is None:
        return

    now = time.time()
    disk_data = {}

    for key in ["read_ios", "write_ios", "read_throughput", "write_throughput"]:
        if (value := disk.get(key)) is None:
            continue

        disk_data[key] = get_rate(f"ucd_disk_io_{key}.{item}", now, value)

    yield 0, f"[{disk['disk_index']}]"

    for state, summary, perfdata in check_diskstat_dict(item, params, {item: disk_data}):
        yield state, summary, perfdata


check_info["ucd_diskio"].update(
    {
        "inventory_function": discover_ucd_diskio,
        "check_function": check_ucd_diskio,
        "service_description": "Disk IO %s",
        "has_perfdata": True,
        "group": "diskstat",
    }
)
