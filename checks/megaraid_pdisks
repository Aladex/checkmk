#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# Example output from agent:
# Slot Number: 0
# Device Id: 4
# Raw Size: 140014MB [0x11177330 Sectors]
# Firmware state: Unconfigured(good)
# Inquiry Data: FUJITSU MBB2147RC       5204BS04P9104BV5
# Slot Number: 1
# Device Id: 5
# Raw Size: 140014MB [0x11177330 Sectors]
# Firmware state: Unconfigured(good)
# Inquiry Data: FUJITSU MBB2147RC       5204BS04P9104BSC

# The agent provides some new information since 1.1.9.
# The dev2enc infos are sent from the agent to have the
# real enclosure numbers instead of the device ids which
# seem to be generated somehow.
#
# dev2enc Enclosure 0 Device ID  6
# dev2enc Enclosure 1 Device ID  252
#
# On new inventory runs the enclosure number is used as
# index and item part.
megaraid_pdisks_legacy_mode = False
# This makes service descriptions backward compatible to match
# inventory made by older versions that didn't support multiple
# controllers
megaraid_pdisks_adapterstr = ["e", "f", "g", "h", "i", "j", "k", "l"]


def parse_megaraid_pdisks(string_table):
    parsed = {}
    adapters = {0: {}}
    current_adapter = adapters[0]
    adapter = 0
    enclosure_devid = -181
    predictive_failure_count = None
    for line in string_table:
        if line[0] == "adapter":
            current_adapter = {}
            adapters[int(line[1])] = current_adapter
        elif line[0] == "dev2enc":
            if line[2].isdigit():
                current_adapter[int(line[5])] = int(line[2])
        elif line[0] == "Adapter" and len(line) == 2:
            current_adapter = adapters[int(line[1][1:])]  # Raute weglassen
            adapter = int(line[1][1:])
        elif line[0] == "Enclosure" and line[1] == "Device":
            try:
                enclosure_devid = int(line[-1])
                # this should fix inventory problems.
                adapters[adapter][enclosure_devid] = enclosure_devid

            except Exception:  # no enclosure device
                enclosure_devid = 0
                adapters[adapter][0] = 0
        elif line[0] == "Enclosure" and line[1] == "Number:":
            for devid, number in current_adapter.items():
                if number == int(line[-1]):
                    enclosure_devid = devid
                    break

        elif line[0] == "Slot":
            slot = int(line[-1])
        elif line[0] == "Predictive" and line[1] == "Failure" and line[2] == "Count:":
            predictive_failure_count = int(line[3])
        elif line[0] == "Firmware" and line[1] == "state:":
            state = line[2].rstrip(",")
        elif line[0] == "Inquiry" and line[1] == "Data:":
            name = " ".join(line[2:])
            # Adapter, Enclosure, Encolsure Device ID, Slot, State, Name
            adapter_name = megaraid_pdisks_adapterstr[adapter]
            enclosure = adapters[adapter][enclosure_devid]
            parsed[f"{adapter_name}{enclosure}/{slot}"] = (
                adapter_name,
                enclosure,
                enclosure_devid,
                slot,
                state,
                name,
                predictive_failure_count,
            )

            predictive_failure_count = None

    return parsed


def discover_megaraid_pdisks(parsed):
    yield from ((item, {}) for item in parsed)


megaraid_pdisks_states = {
    "Online": 0,
    "Hotspare": 0,
    "Unconfigured(good)": 0,
    "JBOD": 0,
    "Failed": 2,
    "Unconfigured(bad)": 1,
    "Copyback": 1,
    "Rebuild": 1,
}


def check_megaraid_pdisks(item, _no_params, parsed):
    try:
        adapter, enclosure, _enc_dev_id, slot, state, name, failure_count = parsed[item]
    except KeyError:
        return

    yield megaraid_pdisks_states.get(state, 3), f"{state} ({name})"

    if failure_count is None:
        return

    yield 1 if failure_count > 0 else 0, f"Predictive fail count: {failure_count}"


check_info["megaraid_pdisks"] = {
    "parse_function": parse_megaraid_pdisks,
    "check_function": check_megaraid_pdisks,
    "inventory_function": discover_megaraid_pdisks,
    "service_description": "RAID PDisk Adapt/Enc/Sl %s",
    "has_perfdata": False,
}
