#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# Example output from agent on success:
# <<<timemachine>>>
# /Volumes/Backup/Backups.backupdb/macvm/2013-11-28-202610
#
# Example output from agent on failure:
# <<<timemachine>>>
# Unable to locate machine directory for host.
import datetime

factory_settings["timemachine_default_levels"] = {"age": (86400, 172800)}  # 1d/2d


def parse_timemachine(info):
    return " ".join(info[0])


def discover_timemachine(section):
    if section != "Unable to locate machine directory for host.":
        return [(None, {})]
    return []


def check_timemachine(item, params, section):
    # We expect at least one line
    if not section.startswith("/Volumes/"):
        yield 2, f"Backup seems to have failed, message was: {section}"
        return

    raw_backup_time = section.split("/")[-1]
    backup_time = datetime.datetime.strptime(raw_backup_time, "%Y-%m-%d-%H%M%S")
    backup_age = (datetime.datetime.now() - backup_time).total_seconds()

    if backup_age < 0:
        yield 3, f"Timestamp of last backup is in the future: {datetime.datetime.strftime(backup_time, '%Y-%m-%d %H:%M:%S')}"
        return

    yield check_levels(
        value=backup_age,
        dsname=None,
        params=params["age"],
        infoname=f"Last backup was at {datetime.datetime.strftime(backup_time, '%Y-%m-%d %H:%M:%S')}",
        human_readable_func=lambda a: f"{get_age_human_readable(a)} ago",
    )


check_info["timemachine"] = {
    "parse_function": parse_timemachine,
    "check_function": check_timemachine,
    "inventory_function": discover_timemachine,
    "default_levels_variable": "timemachine_default_levels",
    "service_description": "Backup Timemachine",
    "group": "backup_timemachine",
}
