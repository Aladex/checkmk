#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables from the check-context which are necessary for
# resolving legacy discovery results such as [("SUMMARY", "diskstat_default_levels")]. Furthermore,
# it might also remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.cpu_load import *  # pylint: disable=wildcard-import,unused-wildcard-import

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables from the check-context which are necessary for
# resolving legacy discovery results such as [("SUMMARY", "diskstat_default_levels")]. Furthermore,
# it might also remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.wmi import *  # pylint: disable=wildcard-import,unused-wildcard-import


def inventory_wmi_cpuload(tables):
    return [(None, None)]


def check_wmi_cpuload(item, params, parsed):
    # the processor queue length is logically similar to linux cpu load as
    # it states the number of processes waiting to be assigned cpu time.
    # unlike cpu load this does not include processes currently being processed,
    # so unless to cpu is (almost) fully utilized, this will be 0.

    try:
        load5min = get_average("load_5min", parsed.timestamp, parsed.load, 5)
        load15min = get_average("load_15min", parsed.timestamp, parsed.load, 15)
    except KeyError as e:
        return 3, "Missing information from agent: %s" % e

    return check_cpu_load_generic(params, (parsed.load, load5min, load15min),
                                  num_cpus=parsed.n_cores,
                                  processor_type=parsed.processor_type)


check_info['wmi_cpuload'] = {
    'inventory_function': inventory_wmi_cpuload,
    'check_function': check_wmi_cpuload,
    'has_perfdata': True,
    'service_description': "Processor Queue",
    'group': 'cpu_load',
}
