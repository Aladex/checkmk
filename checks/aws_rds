#!/usr/bin/env python3
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.aws import *  # pylint: disable=wildcard-import,unused-wildcard-import

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.cpu_util import *  # pylint: disable=wildcard-import,unused-wildcard-import

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.diskstat import *  # pylint: disable=wildcard-import,unused-wildcard-import

# .
#   .--transaction logs usage----------------------------------------------.
#   |        _                                  _   _                      |
#   |       | |_ _ __ __ _ _ __  ___  __ _  ___| |_(_) ___  _ __           |
#   |       | __| '__/ _` | '_ \/ __|/ _` |/ __| __| |/ _ \| '_ \          |
#   |       | |_| | | (_| | | | \__ \ (_| | (__| |_| | (_) | | | |         |
#   |        \__|_|  \__,_|_| |_|___/\__,_|\___|\__|_|\___/|_| |_|         |
#   |                                                                      |
#   |           _                                                          |
#   |          | | ___   __ _ ___   _   _ ___  __ _  __ _  ___             |
#   |          | |/ _ \ / _` / __| | | | / __|/ _` |/ _` |/ _ \            |
#   |          | | (_) | (_| \__ \ | |_| \__ \ (_| | (_| |  __/            |
#   |          |_|\___/ \__, |___/  \__,_|___/\__,_|\__, |\___|            |
#   |                   |___/                       |___/                  |
#   '----------------------------------------------------------------------'

Section = Mapping[str, Mapping[str, float]]


def discover_aws_rds_transaction_logs_usage(section: Section):
    yield from inventory_aws_generic(
        section,
        ["TransactionLogsDiskUsage"],
    )


def check_aws_rds_transaction_logs_usage(item: str, params: Mapping[str, Any], section: Section):
    if (metrics := section.get(item)) is None:
        return

    transaction_logs_space = metrics["TransactionLogsDiskUsage"]
    yield 0, get_bytes_human_readable(transaction_logs_space)

    if (allocated_storage := metrics.get("AllocatedStorage")) is None or allocated_storage == 0.0:
        yield 1, "Cannot calculate usage"
        return

    usage = 100.0 * transaction_logs_space / allocated_storage
    yield check_levels(
        usage,
        "aws_rds_transaction_logs_disk_usage",
        params.get("levels"),
        human_readable_func=get_percent_human_readable,
    )

    if generation := metrics.get("TransactionLogsGeneration"):
        yield 0, f"Generation rate: {aws_get_bytes_rate_human_readable(generation)}"


check_info["aws_rds.transaction_logs_usage"] = {
    # section already migrated!
    "inventory_function": discover_aws_rds_transaction_logs_usage,
    "check_function": check_aws_rds_transaction_logs_usage,
    "service_description": "AWS/RDS %s Transaction Logs Usage",
    "has_perfdata": True,
    "group": "aws_rds_disk_usage",
}

# .
#   .--replication slot usage----------------------------------------------.
#   |                 _ _           _   _                   _       _      |
#   |  _ __ ___ _ __ | (_) ___ __ _| |_(_) ___  _ __    ___| | ___ | |_    |
#   | | '__/ _ \ '_ \| | |/ __/ _` | __| |/ _ \| '_ \  / __| |/ _ \| __|   |
#   | | | |  __/ |_) | | | (_| (_| | |_| | (_) | | | | \__ \ | (_) | |_    |
#   | |_|  \___| .__/|_|_|\___\__,_|\__|_|\___/|_| |_| |___/_|\___/ \__|   |
#   |          |_|                                                         |
#   |                                                                      |
#   |                     _   _ ___  __ _  __ _  ___                       |
#   |                    | | | / __|/ _` |/ _` |/ _ \                      |
#   |                    | |_| \__ \ (_| | (_| |  __/                      |
#   |                     \__,_|___/\__,_|\__, |\___|                      |
#   |                                     |___/                            |
#   '----------------------------------------------------------------------'


@get_parsed_item_data
def check_aws_rds_replication_slot_usage(item, params, metrics):
    replication_slot_space = metrics["ReplicationSlotDiskUsage"]
    yield 0, get_bytes_human_readable(replication_slot_space)

    try:
        usage = 100.0 * replication_slot_space / metrics["AllocatedStorage"]
    except (KeyError, ZeroDivisionError):
        yield 1, "Cannot calculate usage"
    else:
        yield check_levels(
            usage,
            "aws_rds_replication_slot_disk_usage",
            params.get("levels"),
            human_readable_func=get_percent_human_readable,
        )


check_info["aws_rds.replication_slot_usage"] = {
    # section already migrated!
    "inventory_function": lambda p: inventory_aws_generic(p, ["ReplicationSlotDiskUsage"]),
    "check_function": check_aws_rds_replication_slot_usage,
    "service_description": "AWS/RDS %s Replication Slot Usage",
    "has_perfdata": True,
    "group": "aws_rds_disk_usage",
}


# .
#   .--connections---------------------------------------------------------.
#   |                                        _   _                         |
#   |         ___ ___  _ __  _ __   ___  ___| |_(_) ___  _ __  ___         |
#   |        / __/ _ \| '_ \| '_ \ / _ \/ __| __| |/ _ \| '_ \/ __|        |
#   |       | (_| (_) | | | | | | |  __/ (__| |_| | (_) | | | \__ \        |
#   |        \___\___/|_| |_|_| |_|\___|\___|\__|_|\___/|_| |_|___/        |
#   |                                                                      |
#   '----------------------------------------------------------------------'


@get_parsed_item_data
def check_aws_rds_connections(item, params, metrics):
    yield check_levels(
        metrics["DatabaseConnections"],
        "aws_rds_connections",
        params.get("levels"),
        infoname="In use",
    )


check_info["aws_rds.connections"] = {
    # section already migrated!
    "inventory_function": lambda p: inventory_aws_generic(p, ["DatabaseConnections"]),
    "check_function": check_aws_rds_connections,
    "service_description": "AWS/RDS %s Connections",
    "has_perfdata": True,
    "group": "aws_rds_connections",
}

# .
#   .--replica lag---------------------------------------------------------.
#   |                           _ _             _                          |
#   |            _ __ ___ _ __ | (_) ___ __ _  | | __ _  __ _              |
#   |           | '__/ _ \ '_ \| | |/ __/ _` | | |/ _` |/ _` |             |
#   |           | | |  __/ |_) | | | (_| (_| | | | (_| | (_| |             |
#   |           |_|  \___| .__/|_|_|\___\__,_| |_|\__,_|\__, |             |
#   |                    |_|                            |___/              |
#   '----------------------------------------------------------------------'


@get_parsed_item_data
def check_aws_rds_replica_lag(item, params, metrics):
    yield check_levels(
        metrics["ReplicaLag"],
        "aws_rds_replica_lag",
        params.get("lag_levels"),
        human_readable_func=get_age_human_readable,
        infoname="Lag",
    )

    oldest_replica_lag_space = metrics.get("OldestReplicationSlotLag")
    if oldest_replica_lag_space is not None:
        yield check_levels(
            oldest_replica_lag_space,
            "aws_rds_oldest_replication_slot_lag",
            params.get(
                "slot_levels",
            ),
            human_readable_func=get_bytes_human_readable,
            infoname="Oldest replication slot lag",
        )


check_info["aws_rds.replica_lag"] = {
    # section already migrated!
    "inventory_function": lambda p: inventory_aws_generic(p, ["ReplicaLag"]),
    "check_function": check_aws_rds_replica_lag,
    "service_description": "AWS/RDS %s Replica Lag",
    "has_perfdata": True,
    "group": "aws_rds_replica_lag",
}
