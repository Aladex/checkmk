#!/usr/bin/env python3
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from typing import Any, Iterable, Mapping, Sequence

from cmk.base.plugins.agent_based.agent_based_api.v1.type_defs import StringTable
from cmk.base.plugins.agent_based.utils import netapp_api

DiscoveryResult = Iterable[tuple[str, Mapping[str, Any]]]
CheckResult = Iterable[tuple[int, str]]

# <<<netapp_api_fan:sep(9)>>>
# cooling-element-list 20 cooling-element-number 1    rpm 3000    cooling-element-is-error false
# cooling-element-list 20 cooling-element-number 2    rpm 3000    cooling-element-is-error false
# cooling-element-list 20 cooling-element-number 3    rpm 3000    cooling-element-is-error false


def parse_netapp_api_fan(string_table: StringTable) -> netapp_api.SectionSingleInstance:
    return netapp_api.parse_netapp_api_single_instance(
        string_table,
        custom_keys=["cooling-element-list", "cooling-element-number"],
        item_func=None,
    )


check_info["netapp_api_fan"] = {
    "parse_function": parse_netapp_api_fan,
}


discovery_netapp_api_fan_rules = []


def _format_item(key: str) -> str:
    return key.replace(".", "/")


def discovery_netapp_api_fan(section: netapp_api.SectionSingleInstance) -> DiscoveryResult:
    params = host_extra_conf_merged(host_name(), discovery_netapp_api_fan_rules)
    if not netapp_api.discover_single_items(params):
        return
    # TODO: use _get_fans_with_cooling
    for key, values in section.items():
        if values.get("cooling-element-is-not-installed") != "true":
            item_name = _format_item(key)
            yield item_name, {}


def check_netapp_api_fan(
    item: str,
    _no_params,
    section: netapp_api.SectionSingleInstance,
) -> CheckResult:
    fan = section.get("%s.%s" % tuple(item.split("/")))
    if not fan:
        return

    if fan["cooling-element-is-error"] == "true":
        yield 2, "Error in Fan %s" % fan["cooling-element-number"]
    else:
        yield 0, "Operational state OK"


check_info["netapp_api_fan"].update(
    {
        "check_function": check_netapp_api_fan,
        "inventory_function": discovery_netapp_api_fan,
        "service_description": "Fan Shelf %s",
    }
)


def discovery_netapp_api_fan_summary(section: netapp_api.SectionSingleInstance) -> DiscoveryResult:
    params = host_extra_conf_merged(host_name(), discovery_netapp_api_fan_rules)
    if netapp_api.discover_single_items(params):
        return
    if _get_fans_with_cooling(section):
        yield "Summary", {}


def _get_fans_with_cooling(
    fans: Mapping[str, netapp_api.Instance]
) -> Mapping[str, netapp_api.Instance]:
    return {
        key: fan
        for key, fan in fans.items()
        if fan.get("cooling-element-is-not-installed") != "true"
    }


def _get_failed_cooling_elements(fans: Mapping[str, netapp_api.Instance]) -> Sequence[str]:
    erred_fans = []
    for key, value in fans.items():
        if value["cooling-element-is-error"] == "true":
            erred_fans.append(_format_item(key))
    return erred_fans


def check_netapp_api_fan_summary(
    item: str,
    _no_params,
    section: netapp_api.SectionSingleInstance,
) -> CheckResult:
    fans = _get_fans_with_cooling(section)
    yield 0, "%d fans in total" % len(fans)

    erred_fans = _get_failed_cooling_elements(fans)
    if erred_fans:
        erred_fans_names = ", ".join(erred_fans)
        count = len(erred_fans)
        yield 2, "%d fan%s in error state (%s)" % (
            count,
            "" if count == 1 else "s",
            erred_fans_names,
        )


check_info["netapp_api_fan.summary"] = {
    "check_function": check_netapp_api_fan_summary,
    "inventory_function": discovery_netapp_api_fan_summary,
    "service_description": "Fan Shelf %s",
}
