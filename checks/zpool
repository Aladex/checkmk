#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from typing import Any, Iterable, Mapping

from cmk.base.check_legacy_includes.df import df_check_filesystem_list, filesystem_groups
from cmk.base.plugins.agent_based.agent_based_api.v1.type_defs import StringTable
from cmk.base.plugins.agent_based.utils.df import df_discovery, FILESYSTEM_DEFAULT_PARAMS

Section = Mapping[str, Mapping[str, str]]

DiscoveryResult = Iterable[tuple[str, Mapping]]
CheckResult = Iterable[tuple]

# NAME    SIZE  ALLOC   FREE  CAP  HEALTH  ALTROOT
# app02  39.8G  14.1G  25.6G  35%  ONLINE  -
# rpool  39.8G  32.9G  6.81G  82%  ONLINE  -

# Or also:
# NAME        SIZE   USED  AVAIL    CAP  HEALTH  ALTROOT
# sth_ds      278G   127G   151G    45%  ONLINE  -


def parse_zpool(string_table: StringTable) -> Section | None:
    if not string_table:
        return None
    raw_header, *content = string_table

    def canonize_header_entry(entry: str) -> str:
        if entry == "used":
            return "alloc"
        if entry == "avail":
            return "free"
        return entry

    header = [canonize_header_entry(item.lower()) for item in raw_header[0]]
    return {line[0]: dict(zip(header, line)) for line in content}


def discover_zpool(section: Section) -> DiscoveryResult:
    params = host_extra_conf(host_name(), filesystem_groups)
    return df_discovery(params, section)


def check_zpool(item: str, params: Mapping[str, Any], section: Section) -> CheckResult:

    # this belongs to the parse function.
    def mb(val: str) -> float:
        idx = None
        # split number from unit
        for idx, ch in enumerate(val):
            if ch not in "0123456789.-":
                break
        num = float(val[:idx])
        unit_str = val[idx:].lstrip().lower()
        unit = ["b", "k", "m", "g", "t", "p"].index(unit_str)

        return num * (1024 ** (unit - 2))

    fslist = []
    for pool, entry in section.items():
        if "patterns" in params or item == pool:
            fslist.append((pool, mb(entry["size"]), mb(entry["free"]), 0))

    return df_check_filesystem_list(item, params, fslist)


check_info["zpool"] = {
    "check_function": check_zpool,
    "inventory_function": discover_zpool,
    "parse_function": parse_zpool,
    "service_description": "Storage Pool %s",
    "has_perfdata": True,
    "group": "filesystem",
    "default_levels_variable": "filesystem_default_levels",
}

factory_settings["filesystem_default_levels"] = FILESYSTEM_DEFAULT_PARAMS
