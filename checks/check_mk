#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from typing import Any, Iterable, Mapping, Tuple

#   .--only_from-----------------------------------------------------------.
#   |                       _            __                                |
#   |            ___  _ __ | |_   _     / _|_ __ ___  _ __ ___             |
#   |           / _ \| '_ \| | | | |   | |_| '__/ _ \| '_ ` _ \            |
#   |          | (_) | | | | | |_| |   |  _| | | (_) | | | | | |           |
#   |           \___/|_| |_|_|\__, |___|_| |_|  \___/|_| |_| |_|           |
#   |                         |___/_____|                                  |
#   '----------------------------------------------------------------------'

# Target value for agent's IP access configuration. Only if this
# is not None, the inventory will create services
check_mk_only_from_default = None


def check_only_from(_no_item, _no_params, _no_info):
    return (
        3,
        """This has been included in the service "Check_MK" (see long output for details).
The functionality of this service has been incorporated in the "Check_MK" service.
 The corresponding global config option "check_mk_only_from_default"
 will no longer work; please remove it from your main.mk file if
 you have been using this service.
 From now on this feature can be configured via WATO using the
 ruleset "Allowed IP addresses for agent access" - the same rule that
 will be used for the agent bakery (if available).
 The check state will be displayed as part of the "Check_MK" sercice.
""",
    )


check_info["check_mk.only_from"] = {
    "check_function": check_only_from,
    "inventory_function": lambda info: [],
    "service_description": "Check_MK Agent Access",
}

# .
#   .--agent_update--------------------------------------------------------.
#   |                           _                      _       _           |
#   |     __ _  __ _  ___ _ __ | |_    _   _ _ __   __| | __ _| |_ ___     |
#   |    / _` |/ _` |/ _ \ '_ \| __|  | | | | '_ \ / _` |/ _` | __/ _ \    |
#   |   | (_| | (_| |  __/ | | | |_   | |_| | |_) | (_| | (_| | ||  __/    |
#   |    \__,_|\__, |\___|_| |_|\__|___\__,_| .__/ \__,_|\__,_|\__\___|    |
#   |          |___/              |_____|   |_|                            |
#   '----------------------------------------------------------------------'

# Example output from agent:
# <<<check_mk>>>
# AgentUpdate: last_check 1447777834.22 last_update 1447776761.52 aghash e33d0cebcf7404d9 error None


def discover_cmk_agent_update(section):
    if section.get("agentupdate") is not None:
        return [(None, {})]


def _get_error_result(raw_string: str, params: Mapping[str, Any]) -> Iterable[Tuple[int, str]]:
    if "error" not in raw_string:
        return

    error = raw_string.split("error", 1)[1].strip()

    # Sometimes we get duplicate output. Until we find out why, fix the error message:
    if "last_check" in error and "last_update" in error and "error" in error:
        error = error.split("error", 1)[1].strip()

    if error == "None":
        return

    default_state = 1
    if "deployment is currently globally disabled" in error:
        yield int(params.get("error_deployment_globally_disabled", default_state)), error
    else:
        yield default_state, f"Error: {error}"


def check_cmk_agent_update(_no_item, params, section):
    if not (raw_string := section.get("agentupdate")):
        return

    yield from _get_error_result(raw_string, params)

    parts = iter(raw_string.split("error", 1)[0].split())
    parsed = {k: v for k, v in zip(parts, parts) if v != "None"}

    try:
        last_check = float(parsed.get("last_check"))
    except (ValueError, TypeError):
        yield 1, "No successful connect to server yet"
    else:
        result = check_levels(
            time.time() - last_check,
            None,  # no metric
            (2 * 3600 * 24, None),
            human_readable_func=get_age_human_readable,
            infoname="Time since last update check",
        )
        if result[0]:
            yield result  # on migration make this a notice.
        yield 0, "Last update check: " + get_timestamp_human_readable(last_check)

    if last_update := parsed.get("last_update"):
        yield 0, "Last agent update: %s" % get_timestamp_human_readable(last_update)

    if update_url := parsed.get("update_url"):
        # Note: Transformation of URLs from this check (check_mk-check_mk_agent_update) to icons
        # is disabled explicitly in cmk.gui.view_utils:format_plugin_output
        yield 0, f"Update URL: {update_url}"

    if aghash := parsed.get("aghash"):
        yield 0, f"Agent configuration: {aghash[:8]}"

    if pending := parsed.get("pending_hash"):
        yield 0, f"Pending installation: {pending[:8]}"

    return


check_info["check_mk.agent_update"] = {
    "check_function": check_cmk_agent_update,
    "inventory_function": discover_cmk_agent_update,
    "service_description": "Check_MK Agent",
    "group": "agent_update",
}
