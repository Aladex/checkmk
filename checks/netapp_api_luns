#!/usr/bin/env python3
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from typing import Any, Mapping

from cmk.base.check_legacy_includes.df import df_check_filesystem_single
from cmk.base.plugins.agent_based.agent_based_api.v1 import render
from cmk.base.plugins.agent_based.agent_based_api.v1.type_defs import StringTable
from cmk.base.plugins.agent_based.utils import netapp_api
from cmk.base.plugins.agent_based.utils.df import (
    FILESYSTEM_DEFAULT_LEVELS,
    MAGIC_FACTOR_DEFAULT_PARAMS,
    TREND_DEFAULT_PARAMS,
)

_MEBI = 1048576


# <<<netapp_api_luns:sep(9)>>>
# lun /vol/iscsi_crm_dblogs/crm_dblogs_lu01   read-only false size 644286182400   vserver ISCSI_CRM   size-used 538924421120  online true volume iscsi_crm_dblogs


def _netapp_api_luns_item(name: str, _values: object) -> str:
    return name.rsplit("/", 1)[-1]


def parse_netapp_api_luns(string_table: StringTable) -> netapp_api.SectionSingleInstance:
    return netapp_api.parse_netapp_api_single_instance(
        string_table, item_func=_netapp_api_luns_item
    )


check_info["netapp_api_luns"] = {
    "parse_function": parse_netapp_api_luns,
}


def discover_netapp_api_luns(section: netapp_api.SectionSingleInstance):
    yield from ((lun, {}) for lun in section)


def check_netapp_api_luns(
    item: str, params: Mapping[str, Any], section: netapp_api.SectionSingleInstance
):
    if (lun := section.get(item)) is None:
        return

    if lun.get("online") != "true":
        yield 2, "LUN is offline"

    read_only = lun.get("read-only") == "true"
    if read_only != params.get("read_only"):
        expected = str(params.get("read_only")).lower()
        yield 1, "read-only is %s (expected: %s)" % (lun.get("read-only"), expected)

    size_total_bytes = int(lun["size"])

    if params.get("ignore_levels"):
        yield 0, f"Total size: {render.bytes(size_total_bytes)}"
        yield 0, "Used space is ignored"
    else:
        size_avail_bytes = size_total_bytes - int(lun["size-used"])
        yield df_check_filesystem_single(
            item,
            # df_check_filesystem_single expects input in Megabytes
            # (mo: but we're passing mebibytes, apparently.)
            size_total_bytes / _MEBI,
            size_avail_bytes / _MEBI,
            0,
            None,
            None,
            params,
        )


check_info["netapp_api_luns"].update(
    {
        "check_function": check_netapp_api_luns,
        "inventory_function": discover_netapp_api_luns,
        "service_description": "LUN %s",
        "has_perfdata": True,
        "group": "netapp_luns",
        "default_levels_variable": "netapp_api_luns_default_levels",
    }
)

factory_settings["netapp_api_luns_default_levels"] = {
    **FILESYSTEM_DEFAULT_LEVELS,
    **MAGIC_FACTOR_DEFAULT_PARAMS,
    **TREND_DEFAULT_PARAMS,
    "read_only": False,
}
