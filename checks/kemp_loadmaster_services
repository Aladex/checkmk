#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# .1.3.6.1.4.1.12196.13.1.1.13.1 Exchange HTTPS
# .1.3.6.1.4.1.12196.13.1.1.13.3 Exchange MAPI
# .1.3.6.1.4.1.12196.13.1.1.13.4 Exchange SMTP
# .1.3.6.1.4.1.12196.13.1.1.13.5 Lync Internal WebSvc HTTP
# .1.3.6.1.4.1.12196.13.1.1.13.6 Lync Internal WebSvc HTTPS
# .1.3.6.1.4.1.12196.13.1.1.14.1 1
# .1.3.6.1.4.1.12196.13.1.1.14.3 1
# .1.3.6.1.4.1.12196.13.1.1.14.4 1
# .1.3.6.1.4.1.12196.13.1.1.14.5 1
# .1.3.6.1.4.1.12196.13.1.1.14.6 1
# .1.3.6.1.4.1.12196.13.1.1.21.1 882
# .1.3.6.1.4.1.12196.13.1.1.21.3 6386
# .1.3.6.1.4.1.12196.13.1.1.21.4 3
# .1.3.6.1.4.1.12196.13.1.1.21.5 1
# .1.3.6.1.4.1.12196.13.1.1.21.6 1

# Some devices provide strange, wrong or incomplete data
# and it's not possible to exclude them via std. OIDs
# .1.3.6.1.4.1.12196.13.1.1.13.1 lbwebinterface --> B100-MIB::vSname.1
# .1.3.6.1.4.1.12196.13.1.1.13.2 --> B100-MIB::vSname.2
# .1.3.6.1.4.1.12196.13.1.1.13.3 --> B100-MIB::vSname.3
# .1.3.6.1.4.1.12196.13.1.1.14.1 LB_WI --> B100-MIB::vSstate.1
# .1.3.6.1.4.1.12196.13.1.1.14.2 --> B100-MIB::vSstate.2
# .1.3.6.1.4.1.12196.13.1.1.14.3 CAG_LB --> B100-MIB::vSstate.3

from typing import Final, List, Mapping, NamedTuple

from cmk.base.plugins.agent_based.agent_based_api.v1 import State

kemp_loadmaster_service_default_levels = (1500, 2000)

_VS_STATE_MAP: Final = {
    "1": (State.OK, "in service"),
    "2": (State.CRIT, "out of service"),
    "3": (State.CRIT, "failed"),
    "4": (State.WARN, "disabled"),
    "5": (State.WARN, "sorry"),
    "6": (State.OK, "redirect"),
    "7": (State.CRIT, "error message"),
}


class VirtualService(NamedTuple):
    name: str
    connections: int | None
    state: State
    state_txt: str


Section = Mapping[str, VirtualService]


def parse_kemp_loadmaster_services(string_table: List[List[str]]) -> Section:
    return {
        name: VirtualService(
            name,
            int(conns) if conns.isdigit() else None,
            *_VS_STATE_MAP.get(state, (State.UNKNOWN, f"unknown[{state}]")),
        )
        for name, state, conns in string_table
        if name != ""
    }


def discover_kemp_loadmaster_services(section: Section):
    for name, virtual_service in section.items():
        if virtual_service.state_txt not in ["disabled", "unknown[]"]:
            yield name, "kemp_loadmaster_service_default_levels"


def check_kemp_loadmaster_services(item: str, _no_params, section: Section):
    virtual_service = section.get(item)
    if virtual_service is None:
        return
    yield int(virtual_service.state), f"Status: {virtual_service.state_txt}"
    if virtual_service.connections is not None:
        yield int(State.OK), f"Active connections: {virtual_service.connections}", [
            ("conns", virtual_service.connections)
        ]


check_info["kemp_loadmaster_services"] = {
    "parse_function": parse_kemp_loadmaster_services,
    "inventory_function": discover_kemp_loadmaster_services,
    "check_function": check_kemp_loadmaster_services,
    "service_description": "Service %s",
    "has_perfdata": True,
    "snmp_info": (
        ".1.3.6.1.4.1.12196.13.1.1",
        [
            "13",  # B100-MIB::vSname
            "14",  # B100-MIB::vSstate
            "21",  # B100-MIB::conns
        ],
    ),
    "snmp_scan_function": lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.12196.250.10"
    or oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.2021.250.10",
}
