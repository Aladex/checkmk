#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables from the check-context which are necessary for
# resolving legacy discovery results such as [("SUMMARY", "diskstat_default_levels")]. Furthermore,
# it might also remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.temperature import *  # pylint: disable=wildcard-import,unused-wildcard-import
from cmk.base.plugins.agent_based.bluecoat_sensors import VoltageSensor

# OID branch 3 means the sensor unit type (from SENSOR-MIB):
# other(1)
# truthvalue(2)
# specialEnum(3)
# volts(4)
# celsius(5)
# rpm(6)


def inventory_bluecoat_sensors(section, temp):
    yield from (
        (sensor_name, {})
        for sensor_name in (section.temperature_sensors if temp else section.other_sensors)
    )


def check_bluecoat_sensors(item, params, section, temp):
    if not (sensor := (section.temperature_sensors if temp else section.other_sensors).get(item)):
        return

    if temp:
        return check_temperature(
            sensor.value,
            params,
            "bluecoat_sensors_%s" % item,
            dev_status=0 if sensor.is_ok else 2,
        )

    if isinstance(
        sensor,
        VoltageSensor,
    ):
        return (
            0 if sensor.is_ok else 2,
            f"{sensor.value:.1f} V",
            [("voltage", sensor.value)],
        )

    return (
        0 if sensor.is_ok else 2,
        f"{sensor.value:.1f}",
        [],
    )


check_info["bluecoat_sensors"] = {
    "check_function": lambda item, params, info: check_bluecoat_sensors(item, params, info, False),
    "inventory_function": lambda info: inventory_bluecoat_sensors(info, False),
    "service_description": "%s",
    "has_perfdata": True,
}

check_info["bluecoat_sensors.temp"] = {
    "check_function": lambda item, params, info: check_bluecoat_sensors(item, params, info, True),
    "inventory_function": lambda info: inventory_bluecoat_sensors(info, True),
    "service_description": "Temperature %s",
    "has_perfdata": True,
    "group": "temperature",
}
