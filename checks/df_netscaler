#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from cmk.base.check_legacy_includes.df import df_check_filesystem_list, filesystem_groups
from cmk.base.plugins.agent_based.agent_based_api.v1.type_defs import StringTable
from cmk.base.plugins.agent_based.utils.df import (
    df_discovery,
    EXCLUDED_MOUNTPOINTS,
    FILESYSTEM_DEFAULT_PARAMS,
    FSBlocks,
)

#
# Example Output:
# .1.3.6.1.4.1.5951.4.1.1.41.8.1.1.4.47.118.97.114  "/var"
# .1.3.6.1.4.1.5951.4.1.1.41.8.1.1.6.47.102.108.97.115.104  "/flash"
# .1.3.6.1.4.1.5951.4.1.1.41.8.1.2.4.47.118.97.114  96133
# .1.3.6.1.4.1.5951.4.1.1.41.8.1.2.6.47.102.108.97.115.104  7976
# .1.3.6.1.4.1.5951.4.1.1.41.8.1.3.4.47.118.97.114  87418
# .1.3.6.1.4.1.5951.4.1.1.41.8.1.3.6.47.102.108.97.115.104  7256


factory_settings["filesystem_default_levels"] = FILESYSTEM_DEFAULT_PARAMS


def parse_df_netscaler(string_table: StringTable) -> FSBlocks:
    return [(name, float(size), float(avail), 0.0) for name, size, avail in string_table]


def inventory_df_netscaler(section: FSBlocks):
    mplist = [
        name
        for name, size, *_rest in section
        if size and size > 0 and name not in EXCLUDED_MOUNTPOINTS
    ]
    return df_discovery(host_extra_conf(host_name(), filesystem_groups), mplist)


def check_df_netscaler(item, params, section: FSBlocks):
    fslist = [mp for mp in section if "patterns" in params or item == mp[0]]
    return df_check_filesystem_list(item, params, fslist)


check_info["df_netscaler"] = {
    "check_function": check_df_netscaler,
    "inventory_function": inventory_df_netscaler,
    "default_levels_variable": "filesystem_default_levels",
    "service_description": "Filesystem %s",
    "has_perfdata": True,
    "group": "filesystem",
    "snmp_info": (
        ".1.3.6.1.4.1.5951.4.1.1.41.8.1",
        [
            1,  # sysHealthDiskName
            2,  # sysHealthDiskSize
            3,  # sysHealthDiskAvail
        ],
    ),
    "snmp_scan_function": lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.5951.1"),
}
