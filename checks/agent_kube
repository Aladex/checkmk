#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2022 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from typing import Any, Mapping, Optional, Sequence, Union


def agent_kube_arguments(
    params: Mapping[str, Any], hostname: str, ipaddress: Optional[str]
) -> Sequence[Union[str, tuple[str, str, str]]]:
    args = ["--cluster", params["cluster-name"]]
    args.extend(["--token", passwordstore_get_cmdline("%s", params["token"])])

    args.append("--monitored-objects")
    for monitored_object in params.get("monitored-objects", ["nodes", "deployments", "pods"]):
        args.append(monitored_object)

    if "namespaces" in params:
        namespace_filter_option, filter_patterns = params["namespaces"]
        for namespace_pattern in filter_patterns:
            args.append(f"--{namespace_filter_option}")
            args.append(namespace_pattern)

    api_params = params["kubernetes-api-server"]
    args.extend(["--api-server-endpoint", api_params["endpoint"]])
    if api_params.get("verify-cert"):
        args.append("--verify-cert-api")
    args.extend(["--api-server-proxy", get_http_proxy(api_params["proxy"]).serialize()])

    if (collector_params := params.get("cluster-collector")) is not None:
        args.extend(["--cluster-collector-endpoint", collector_params["endpoint"]])
        if collector_params.get("verify-cert"):
            args.append("--verify-cert-collector")
        if collector_timeouts := collector_params.get("timeout"):
            args.extend(
                ["--cluster-collector-connect-timeout", collector_timeouts["connect"]]
                if "connect" in collector_timeouts
                else []
            )
            args.extend(
                ["--cluster-collector-read-timeout", collector_timeouts["read"]]
                if "read" in collector_timeouts
                else []
            )
        if proxy := collector_params.get("proxy"):
            args.extend(["--cluster-collector-proxy", get_http_proxy(proxy).serialize()])

    return args


special_agent_info["kube"] = agent_kube_arguments
