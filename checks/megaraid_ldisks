#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from cmk.base.plugins.agent_based.agent_based_api.v1 import Result, State
from cmk.base.plugins.agent_based.utils.megaraid import check_state

# Example output from agent:
# Adapter 0 -- Virtual Drive Information:
# Virtual Disk: 0 (Target Id: 0)
# Size:139488MB
# State: Optimal
# Stripe Size: 64kB
# Number Of Drives:2
# Adapter 1: No Virtual Drive Configured.


def _tuple(r: Result) -> tuple[int, str]:
    return int(r.state), r.summary


def megaraid_ldisks_is_new_drive(l):
    return (
        l.startswith("Virtual Disk:")
        or l.startswith("Virtual Drive:")
        or l.startswith("CacheCade Virtual Drive:")
    )


def parse_megaraid_ldisks(info):
    parsed = {}
    adapter = None
    disk = None
    item = None
    for line in info:
        l = " ".join(line)
        if line[0] == "Adapter" and not l.endswith("No Virtual Drive Configured."):
            adapter = line[1]
        elif megaraid_ldisks_is_new_drive(l) and adapter is not None:
            disk = l.split(": ")[1].split(" ")[0]
            item = "%d/%d" % (int(adapter), int(disk))
            parsed[item] = {}

        elif item is not None and item in parsed:

            if line[0].startswith("State"):
                parsed[item]["state"] = l.split(":")[1].strip()
            elif line[0].startswith("Default"):
                if line[1].startswith("Cache"):
                    parsed[item]["default_cache"] = " ".join(line[3:]).replace(": ", "")
                elif line[1].startswith("Write"):
                    parsed[item]["default_write"] = " ".join(line[3:]).replace(": ", "")

            elif line[0].startswith("Current"):
                if line[1].startswith("Cache"):
                    parsed[item]["current_cache"] = " ".join(line[3:]).replace(": ", "")
                elif line[1].startswith("Write"):
                    parsed[item]["current_write"] = " ".join(line[3:]).replace(": ", "")
    return parsed


def discover_megaraid_ldisks(parsed):
    yield from ((item, {}) for item in parsed)


def check_megaraid_ldisks(item, _no_params, parsed):
    if (data := parsed.get(item)) is None:
        return

    raidstate = data.get("state")
    if raidstate is None:
        return

    yield _tuple(check_state(State.CRIT, "State", raidstate.lower(), "optimal"))

    if default_cache := data.get("default_cache"):
        yield _tuple(check_state(State.WARN, "Cache", data.get("current_cache"), default_cache))

    if default_write := data.get("default_write"):
        yield _tuple(check_state(State.WARN, "Write", data.get("current_write"), default_write))


check_info["megaraid_ldisks"] = {
    "parse_function": parse_megaraid_ldisks,
    "check_function": check_megaraid_ldisks,
    "inventory_function": discover_megaraid_ldisks,
    "service_description": "RAID Adapter/LDisk %s",
}
