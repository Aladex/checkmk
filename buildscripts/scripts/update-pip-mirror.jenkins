def NODE = "linux"

properties([
  buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '7', numToKeepStr: '14')),
])
ansiColor("xterm"){
    timeout(time: 12, unit: 'HOURS') {
        node (NODE) {
            stage('checkout sources') {
                checkout(scm)
                notify = load 'buildscripts/scripts/lib/notify.groovy'
            }
            try {
                stage("Update mirror") {
                    docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
                        def BUILD_IMAGE = docker.build("build-image:${env.BUILD_ID}", "--pull ${WORKSPACE}/buildscripts/docker_image_aliases/IMAGE_TESTING")
                        BUILD_IMAGE.inside() {
                            sh("make mrproper")
                            sh("make .venv")
                            sh("make runtime-requirements.txt")
                        }
                        withCredentials([usernamePassword(credentialsId: '7c93ad35-247e-4da5-9d62-7bf84acc341f', passwordVariable: 'DEVPI_PWD', usernameVariable: 'DEVPI_USER')]) {
                            sh("make pip-mirror-dl-pkgs")
                        } 
                        withCredentials([sshUserPrivateKey(credentialsId: 'devpi', keyFileVariable: 'DEVPI_KEY')]) {
                            BUILD_IMAGE.inside() {
                                sh("make pip-mirror-scp-pkgs-internal")
                            }
                        }
                        withCredentials([usernamePassword(credentialsId: '7c93ad35-247e-4da5-9d62-7bf84acc341f', passwordVariable: 'DEVPI_PWD', usernameVariable: 'DEVPI_USER')]) {
                            sh("make pip-mirror-ul-pkgs")
                        }
                        sh("make pip-mirror-verify")
                    }
                }
            } catch(Exception e) {
                notify.notify_error(e)
            }
        }
    }
}
